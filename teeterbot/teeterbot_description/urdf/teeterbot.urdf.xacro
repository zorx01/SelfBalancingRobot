<?xml version="1.0"?>
<robot name="teeterbot" xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:include filename="$(find teeterbot_description)/urdf/teeterbot_friction.urdf"/>

  <xacro:arg name="pub_ground_truth" default="0" />
  <xacro:arg name="auto_reset_orientation" default="0" />
  <xacro:arg name="auto_reset_delay" default="2.0" />

  <xacro:arg name="wheel_mass" default="1.0" />
  <xacro:arg name="wheel_radius" default="0.2" />
  <xacro:arg name="body_mass" default="10.0" />
  <xacro:arg name="body_width" default="0.3" />
  <xacro:arg name="body_depth" default="0.3" />
  <xacro:arg name="body_length" default="0.8" />
  <xacro:arg name="training_wheels" default="true" />

  <xacro:property name="wheel_mass" value="$(arg wheel_mass)" />
  <xacro:property name="wheel_radius" value="$(arg wheel_radius)" />
  <xacro:property name="wheel_thickness" value="0.1" />
  <xacro:property name="wheelbase" value="${0.2 + body_width}" />

  <xacro:property name="body_mass" value="$(arg body_mass)" />
  <xacro:property name="body_width" value="$(arg body_width)" />
  <xacro:property name="body_depth" value="$(arg body_depth)" />
  <xacro:property name="body_length" value="$(arg body_length)" />

  <gazebo>
    <plugin name="teeterbot_interface" filename="libteeterbot_gazebo_plugin.so">
      <pub_ground_truth>$(arg pub_ground_truth)</pub_ground_truth>
      <auto_reset_orientation>$(arg auto_reset_orientation)</auto_reset_orientation>
      <auto_reset_delay>$(arg auto_reset_delay)</auto_reset_delay>
      <body_length>$(arg body_length)</body_length>
      <voltage_mode>$(arg voltage_mode)</voltage_mode>
      <torque_mode>$(arg torque_mode)</torque_mode>
      <speed_mode>$(arg speed_mode)</speed_mode>
    </plugin>
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <joint_name>left_wheel_joint</joint_name>
      <joint_name>right_wheel_joint</joint_name>
      <update_rate>100</update_rate>
    </plugin>
  </gazebo>

  <xacro:macro name="wheel" params="name y_offset" >
    <link name="${name}" >
      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" ixy="0" ixz="0" iyy="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" iyz="0" izz="${wheel_mass/2 * wheel_radius*wheel_radius}"/>
      </inertial>
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <visual>
        <origin xyz="0 0 0" rpy="1.5707 0 0"/>
        <geometry>
          <cylinder radius="${wheel_thickness/2 + 0.01}" length="0.07"/>
        </geometry>
        <material name="grey"/>
      </visual>
      <collision name="collision_${name}">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}"/>
        </geometry>
      </collision>
    </link>
    <joint name="${name}_joint" type="continuous">
      <origin xyz="0 ${y_offset} 0" rpy="-1.570796 0 0"/>
      <parent link="base_link"/>
      <child link="${name}"/>
      <axis xyz="0 0 1" />
    </joint>
  </xacro:macro>

  <xacro:wheel name="left_wheel" y_offset="${wheelbase/2}" />
  <xacro:wheel name="right_wheel" y_offset="${-wheelbase/2}" />

  <link name="body_com">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="${body_mass}"/>
      <inertia ixx="${body_mass/12 * (body_width*body_width + body_length*body_length)}" ixy="0" ixz="0" iyy="${body_mass/12 * (body_length*body_length + body_depth*body_depth)}" iyz="0" izz="${body_mass/12 * (body_width*body_width + body_depth*body_depth)}"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_depth} ${body_width} ${body_length}"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <collision name="collision_chassis">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_depth} ${body_width} ${body_length}"/>
      </geometry>
    </collision>
  </link>

  <link name="base_link">
    <xacro:if value="$(arg training_wheels)" >
      <collision name="training_wheel_1">
        <origin xyz="1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
      <collision name="training_wheel_2">
        <origin xyz="-1 0 ${0.025-wheel_radius}" rpy="0 0 0"/>
        <geometry>
          <sphere radius="0.024"/>
        </geometry>
      </collision>
    </xacro:if>
  </link>

  <joint name="base_com_joint" type="fixed">
    <origin xyz="0 0 ${body_length/2}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="body_com"/>
  </joint>

  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>

  <material name="orange">
    <color rgba="0.64 0.313939 0.095351 1.0"/>
  </material>

<!-- IMU SENSOR -->

    <link name="imu_link">
    <visual>
        <geometry>
        <box size="0.001 0.001 0.001"/>
        </geometry>
    </visual>
    <collision>
        <geometry>
        <box size="0.001 0.001 0.001"/>
        </geometry>
    </collision>
    </link>

    <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.01"/>
    </joint>

    <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
        <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
        <ros>
            <namespace>/teeterbot</namespace>
            <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <imu>
        <angular_velocity>
            <x>
            <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
            </noise>
            </x>
            <y>
            <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
            </noise>
            </y>
            <z>
            <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
            </noise>
            </z>
        </angular_velocity>
        <linear_acceleration>
            <x>
            <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
            </noise>
            </x>
            <y>
            <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
            </noise>
            </y>
            <z>
            <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
            </noise>
            </z>
        </linear_acceleration>

        </imu>
    </sensor>
    </gazebo>
</robot>
